#! /usr/bin/ruby

#
# Copyright 2012 Varnish Software AS
#
# Written by Tollef Fog Heen <tfheen@varnish-software.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

require "bundler/setup"
require 'json'
require "newrelic_plugin"

module VarnishAgent
  def VarnishAgent.varnishstat(vname = nil)
    cmd = [ "varnishstat", "-1", "-j" ]
    if not vname.nil?
      cmd.push("-n", vname.to_s)
    end
    r = ""
    IO::popen(cmd, mode="r") do |io|
      r += io.read()
    end
    JSON.parse(r)
  end

  class Agent < NewRelic::Plugin::Agent::Base
    agent_guid "com.varnish-software.newrelic-stat"
    agent_version '0.0.3'
    agent_human_labels("Varnish") { "varnish[#{@vname||"default"}]"}
    agent_config_options :vname

#    metric_human_label { "Varnish[#{agent.instance_label}]: #{config[:description]}" }

    def unit(name)
      case name.to_s
        when /^client_(conn|drop)/
        "connections"
        when /^client_(req|hit|miss)/
        "requests"
        when /^backend_/
        "connections"
        when /^fetch_/
        "fetch"
        when /^n_(obj|expired|lru)/
        "objects"
        when /^n_wrk/
        "threads"
        when /^n_backend/
        "backends"
        when /^n_/
        "structs"
        when /^s_sess/
        "sessions"
        when /^s_(req|pipe|pass|fetch)/
        "requests"
        when /^s_(hdr|body)byes/
        "bytes"
        when /^sess/
        "sessions"
        else
        "units"
        end
    end

    def poll_cycle
      VarnishAgent.varnishstat(@vname).each do |name,stat|
#        puts name
        if name == "timestamp"
          next
        end
        if stat["flag"] == "a"
          report_counter_metric stat["description"], unit(name) + "/sec", stat["value"]
        else
          report_metric stat["description"], unit(name), stat["value"].to_i
        end
      end
    rescue => e
      $stderr.puts "#{e}: #{e.backtrace.join("\n  ")}"
    end

    def report_counter_metric(metric, type, value)
      @processors ||= {}

      if @processors[metric].nil?
        @processors[metric] = NewRelic::Processor::EpochCounter.new
      end

      report_metric metric, type, @processors[metric].process(value)
    end
  end

  NewRelic::Plugin::Setup.install_agent :varnish,VarnishAgent

  #
  # Launch the agent (never returns)
  #
  NewRelic::Plugin::Run.setup_and_run
end
