#! /usr/bin/ruby

#
# Copyright 2012 Varnish Software AS
#
# Written by Tollef Fog Heen <tfheen@varnish-software.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

require 'json'

module VarnishAgent
  def VarnishAgent.varnishstat(vname = nil)
    cmd = [ "varnishstat", "-1", "-j" ]
    if not vname.nil?
      cmd.push("-n", vname.to_s)
    end
    JSON.parse(IO::popen(cmd, mode="r").read())
  end
  
  class Agent < Component::Agent::Base
    agent_ident "com.varnish-software.stat"
    agent_human_labels("Varnish") { "#{@vname}"}
    agent_config :vname
    @metrics = {}
    def auto_setup opts
      VarnishAgent.varnishstat(@vname).each do |name,stat|
        if name == "timestamp"
          next
        end
        if stat["flag"] == "a"
          type = :counter
        else
          type = :gauge
        end
        create_metric name, type: type, agent: {description: stat["description"] }
      end
    end
  end

  class Metric < Component::Metric::Base
    metric_human_label { "Varnish[#{agent.instance_label}]: #{config[:description]}" }
  end

  class PollCycle < Component::PollCycle::Base
    def varnishstat
      @stats ||= VarnishAgent.varnishstat(agent.vname)
    end

    def gather_metric(metric)
      varnishstat[metric.config[:ident]].to_i
    end
  end

  #
  # Register this agent
  #
  Component::Setup.install_agent :varnish,VarnishAgent
end
